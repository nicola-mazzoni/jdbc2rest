name: ci

on:
  push:
    branches:
      - master  # Esegui il workflow quando viene fatto un push su 'master'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-

      - name: Build with Maven
        run: mvn clean install -DskipTests

      #- name: Upload JAR Artifact
      #  uses: actions/upload-artifact@v3
      #  with:
      #    name: jdbc2rest-jar
      #    path: target/*.jar

  docker:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download JAR Artifact
        uses: actions/download-artifact@v3
        with:
          name: jdbc2rest-jar
          path: target

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t riklupo2001/jdbc2rest:latest .
          docker push riklupo2001/jdbc2rest:latest

  vpn_setup:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Cache FortiClient Packages
        uses: actions/cache@v3
        with:
          path: /var/cache/apt/archives
          key: forticlient-cache-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            forticlient-cache-${{ runner.os }}-

      - name: Install FortiClient
        run: |
          sudo apt-get update
          wget -O - https://repo.fortinet.com/repo/forticlient/7.4/ubuntu22/DEB-GPG-KEY | gpg --dearmor | sudo tee /usr/share/keyrings/repo.fortinet.com.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/repo.fortinet.com.gpg] https://repo.fortinet.com/repo/forticlient/7.4/ubuntu22/ stable non-free" | sudo tee /etc/apt/sources.list.d/repo.fortinet.com.list
          sudo apt-get update
          sudo apt install -y forticlient

      - name: Create VPN profile
        run: |
          cat <<EOF | forticlient vpn edit your-vpn-name
          1
          ${{ secrets.VPN_IP_ADDRESS }}
          ${VPN_PORT:-443}
          2
          ${{ secrets.VPN_USERNAME }}
          3
          EOF

      - name: Connect to VPN
        run: |
          cat <<EOF | forticlient vpn connect your-vpn-name
          ${{ secrets.VPN_PASSWORD }}
          1
          EOF

      - name: Wait for VPN to connect
        run: sleep 10  # Attendere la connessione VPN

  #deploy:
  #  runs-on: ubuntu-latest
  #  needs: vpn_setup
  #  steps:
  #    - name: Deploy to remote server
  #      run: ssh -i ${{ secrets.SSH_PRIVATE_KEY }} ${{ secrets.SSH_USER_SERVER }} "docker pull riklupo2001/jdbc2rest:latest && docker-compose up -d"


    #- name: Analisi del codice con SonarQube
    #  run: mvn sonar:sonar -Dsonar.organization=riccardo2001 -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=${{ secrets.SONAR_TOKEN }}

    #- name: Pubblica su GitHub Packages
    #  run: mvn deploy
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    #- name: Deploy su server remoto
    #  run: ssh -i ${{ secrets.SSH_PRIVATE_KEY }} ${{ secrets.SSH_USER_SERVER }} "docker pull riklupo2001/jdbc2rest:latest && docker-compose up -d"

